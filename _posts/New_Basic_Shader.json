{
  "id": 256,
  "name": "New Basic Shader",
  "fragment": "precision highp float;\nvarying vec2 vUv;\nuniform float time;\nuniform vec2 mouse;\nuniform vec2 resolution;\nvec2 R = resolution;\nvec2 Offset;\nvec2 Scale = vec2(0.02, 0.002);\nfloat Saturation = 0.18;\nvec3 lungth(vec2 x, vec3 c) \n                        {\n                            return vec3(length(x + c.r), length(x + c.g), length(c.b));\n                        }\nvoid main(void) \n                        {\n                            vec2 position = (vUv.xy - resolution * 0.9) / resolution.yy;\n                            float th = atan(position.y, position.x) / (1.0 * 3.1415926);\n                            float dd = length(position) + 0.005;\n                            float d = 0.5 / dd + time;\n                            vec2 x = vUv.xy;\n                            vec3 c2 = vec3(0, 0, 0);\n                            x = x * Scale * R / R.x;\n                            x + sin(x.yx * sqrt(vec2(1, 9))) / 1.;\n                            c2 = lungth(sin(x * sqrt(vec2(3, 43))), vec3(5, 6, 7) * Saturation * d);\n                            x += sin(x.yx * sqrt(vec2(73, 5))) / 5.;\n                            c2 = 2. * lungth(sin(time + x * sqrt(vec2(33., 23.))), c2 / 9.);\n                            x += sin(x.yx * sqrt(vec2(93, 7))) / 3.;\n                            c2 = lungth(sin(x * sqrt(vec2(3., 1.))), c2 / 2.0);\n                            c2 = .5 + .5 * sin(c2 * 8.);\n                            vec3 uv = vec3(th + d, th - d, th + sin(d) * 0.45);\n                            float a = 0.5 + cos(uv.x * 3.1415926 * 2.0) * 0.5;\n                            float b = 0.5 + cos(uv.y * 3.1415926 * 2.0) * 0.5;\n                            float c = 0.5 + cos(uv.z * 3.1415926 * 6.0) * 0.5;\n                            vec3 color = mix(vec3(0.1, 0.5, 0.5), vec3(0.1, 0.1, 0.2), pow(a, 0.2)) * 3.;\n                            color += mix(vec3(0.8, 0.2, 1.0), vec3(0.1, 0.1, 0.2), pow(b, 0.1)) * 0.75;\n                            color += mix(c2, vec3(0.1, 0.2, 0.2), pow(c, 0.1)) * 0.75;\n                            gl_FragColor = vec4((color * dd), 1.0);\n                        }\n",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nvoid main() {\n\n    // To pass variables to the fragment shader, you assign them here in the\n    // main function. Traditionally you name the varying with vAttributeName\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n\n    // This sets the position of the vertex in 3d space. The correct math is\n    // provided below to take into account camera and object data.\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "type": "v3",
      "glslType": "vec3",
      "description": ""
    },
    "time": {
      "name": "time",
      "type": "f",
      "glslType": "float",
      "description": ""
    },
    "mouse": {
      "name": null,
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 0.5,
        "y": 0.5
      },
      "description": ""
    },
    "resolution": {
      "name": null,
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 1,
        "y": 1
      },
      "description": ""
    }
  },
  "url": "http://shaderfrog.com/app/view/256",
  "user": {
    "username": "bzhkl",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}
